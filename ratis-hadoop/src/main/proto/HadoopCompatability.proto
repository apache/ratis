/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";
option java_package = "org.apache.ratis.proto.hadoop";
option java_outer_classname = "HadoopCompatibilityProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package ratis.hadoop;

/**
 * This proto file is a replacement for Hadoop.proto.
 * The problem occurs because Hadoop's depends on protobuf 2.5.0.
 * Where as Ratis uses protbuf 3.5.0 or greater
 * This proto create a bytestring format to transfer the protos
 * and then convert the bytestring to v3.5.0 proto at the rpc endpoint.
 */

enum ServerOps {
  requestVote = 1;
  appendEntries = 2;
  installSnapshot = 3;
  startLeaderElection = 4;
}

message ServerRequestProto {
    required ServerOps type = 1;
    required bytes request = 2;
}

message ServerReplyProto {
    required ServerOps type = 1;
    required bytes response = 2;
}

enum ClientOps {
    submitClientRequest = 1;
    setConfiguration = 2;
    groupManagement = 3;
    groupList = 4;
    groupInfo = 5;
    transferLeadership = 6;
}

message ClientRequestProto {
    required ClientOps type = 1;
    required bytes request = 2;
}

message ClientReplyProto {
    required ClientOps type = 1;
    required bytes response = 2;
}

service HadoopServerProtocolService {
    rpc sendServer(ServerRequestProto) returns (ServerReplyProto);
}

service HadoopClientProtocolService {
    rpc sendClient(ClientRequestProto) returns (ClientReplyProto);
}