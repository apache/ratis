/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ratis.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.EnumMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import java.util.function.Consumer;

/**
 * This class is for the resource generated by hadoop-maven-plugins:version-info.
 * <p>
 * This class is immutable.
 */
public final class VersionInfo {
  static final Logger LOG = LoggerFactory.getLogger(VersionInfo.class);

  private static final String VERSION_PROPERTIES = "ratis-version.properties";
  private static final String UNKNOWN = "<unknown>";
  private static final String FORMAT = "  %20s: %s";

  private enum Key {
    NAME, VERSION, REVISION;

    static Key parse(String key) {
      for (Key k : Key.values()) {
        if (k.getLowerCaseName().equals(key)) {
          return k;
        }
      }
      return null;
    }

    private final String lowerCaseName = name().toLowerCase();

    String getLowerCaseName() {
      return lowerCaseName;
    }
  }

  private static class KeyMap {
    private final Map<Key, String> map;

    KeyMap(EnumMap<Key, String> map) {
      this.map = Collections.unmodifiableMap(map);
    }

    String getOrDefault(Key key) {
      return map.getOrDefault(key, UNKNOWN);
    }

    String format(Key key) {
      return String.format(FORMAT, key.getLowerCaseName(), getOrDefault(key));
    }
  }

  public static VersionInfo load(Class<?> clazz) {
    final Properties properties = new Properties();

    try (InputStream in = clazz.getClassLoader().getResourceAsStream(VERSION_PROPERTIES)) {
      properties.load(in);
    } catch (IOException e) {
      LOG.warn("Failed to load resource '{}' for {}", VERSION_PROPERTIES, clazz, e);
    }
    return new VersionInfo(clazz, properties);
  }

  private final Class<?> clazz;
  private final KeyMap coreEntries;
  private final Map<String, String> otherEntries;

  private VersionInfo(Class<?> clazz, Properties properties) {
    this.clazz = Objects.requireNonNull(clazz, "clazz == null");

    final EnumMap<Key, String> cores = new EnumMap<>(Key.class);
    final Map<String, String> others = new LinkedHashMap<>(); // preserve insertion order
    for (Map.Entry<Object, Object> e : properties.entrySet()) {
      final String key = e.getKey().toString();
      final String value = e.getValue().toString();
      final Key k = Key.parse(key);
      if (k != null) {
        cores.put(k, value);
      } else {
        others.put(key, value);
      }
    }

    this.coreEntries = new KeyMap(cores);
    this.otherEntries = Collections.unmodifiableMap(others);
  }

  public void printStartupMessages(Object name, Consumer<String> log) {
    Objects.requireNonNull(name, "name == null");
    log.accept(String.format("Starting %s -- %s %s"
        , coreEntries.getOrDefault(Key.NAME), clazz.getSimpleName(), name));
    log.accept(coreEntries.format(Key.VERSION));
    log.accept(coreEntries.format(Key.REVISION));

    for (Map.Entry<String, String> e : otherEntries.entrySet()) {
      log.accept(String.format(FORMAT, e.getKey(), e.getValue()));
    }
  }

  public static void main(String[] args) {
    VersionInfo.load(VersionInfo.class).printStartupMessages(":", System.out::println);
  }
}
